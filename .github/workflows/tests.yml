name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    name: Run External Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lua-version: ['5.1']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Lua ${{ matrix.lua-version }}
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: ${{ matrix.lua-version }}

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install Busted
        run: |
          luarocks install busted
          luarocks install luacov

      - name: Display Lua version
        run: lua -v

      - name: Display Busted version
        run: busted --version

      - name: Run tests
        run: busted --verbose --coverage tests/

      - name: Generate coverage report
        run: luacov
        continue-on-error: true

      - name: Display coverage summary
        run: |
          if [ -f luacov.report.out ]; then
            echo "=== Coverage Summary ==="
            head -n 20 luacov.report.out
          fi
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: luacov.report.out
          retention-days: 7

  lint:
    name: Lua Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: '5.1'

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install luacheck
        run: luarocks install luacheck

      - name: Run luacheck
        run: |
          luacheck --version
          luacheck *.lua --no-unused-args --no-max-line-length
        continue-on-error: true

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()

    steps:
      - name: Check test status
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Tests failed!"
            exit 1
          fi

      - name: Check lint status
        run: |
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ Linting passed!"
          elif [ "${{ needs.lint.result }}" == "skipped" ]; then
            echo "⚠️ Linting skipped"
          else
            echo "⚠️ Linting had warnings (non-blocking)"
          fi
        continue-on-error: true
