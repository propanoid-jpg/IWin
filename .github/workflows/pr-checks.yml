name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test PR Changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better diffs

      - name: Setup Lua 5.1
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: '5.1'

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install dependencies
        run: |
          luarocks install busted
          luarocks install luacov
          luarocks install luacheck

      - name: Run tests with coverage
        id: test
        run: |
          busted --verbose --coverage tests/ > test_output.txt 2>&1
          TEST_EXIT_CODE=$?
          cat test_output.txt
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit $TEST_EXIT_CODE

      - name: Generate coverage
        run: luacov
        if: always()

      - name: Extract coverage percentage
        id: coverage
        run: |
          if [ -f luacov.stats.out ]; then
            # Simple coverage calculation (this is basic)
            TOTAL_LINES=$(grep -E "^[0-9]" luacov.stats.out | wc -l)
            COVERED_LINES=$(grep -E "^[1-9]" luacov.stats.out | wc -l)
            if [ $TOTAL_LINES -gt 0 ]; then
              COVERAGE=$(awk "BEGIN {printf \"%.1f\", ($COVERED_LINES / $TOTAL_LINES) * 100}")
              echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
              echo "üìä Coverage: ${COVERAGE}%"
            fi
          fi
        if: always()
        continue-on-error: true

      - name: Run luacheck
        id: lint
        run: |
          luacheck *.lua --no-unused-args --no-max-line-length > lint_output.txt 2>&1
          LINT_EXIT_CODE=$?
          cat lint_output.txt
          echo "exit_code=$LINT_EXIT_CODE" >> $GITHUB_OUTPUT
          # Don't fail on lint warnings
          exit 0
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testExitCode = '${{ steps.test.outputs.exit_code }}';
            const lintExitCode = '${{ steps.lint.outputs.exit_code }}';
            const coverage = '${{ steps.coverage.outputs.coverage }}';

            let testStatus = testExitCode === '0' ? '‚úÖ Passed' : '‚ùå Failed';
            let lintStatus = lintExitCode === '0' ? '‚úÖ No issues' : '‚ö†Ô∏è Has warnings';

            const comment = `## üß™ PR Test Results

            | Check | Status |
            |-------|--------|
            | **Tests** | ${testStatus} |
            | **Linting** | ${lintStatus} |
            ${coverage ? `| **Coverage** | ${coverage}% |` : ''}

            ${testExitCode !== '0' ? '‚ö†Ô∏è **Tests failed!** Please review the test output above.' : ''}

            <details>
            <summary>View full test output</summary>

            \`\`\`
            Check the Actions tab for full logs
            \`\`\`
            </details>

            ---
            *Automated check by GitHub Actions*
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üß™ PR Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pr-test-results
          path: |
            test_output.txt
            lint_output.txt
            luacov.report.out
          retention-days: 30

  changes:
    name: Detect Changed Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **.lua
            **.toc
            tests/**

      - name: List changed files
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Comment on PR with changes
        uses: actions/github-script@v7
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ');
            const luaFiles = changedFiles.filter(f => f.endsWith('.lua'));
            const testFiles = changedFiles.filter(f => f.includes('test'));

            if (luaFiles.length > 0 && testFiles.length === 0) {
              const comment = `## ‚ö†Ô∏è No Test Changes Detected

              This PR modifies ${luaFiles.length} Lua file(s) but doesn't include test changes.

              Consider adding tests for:
              ${luaFiles.map(f => `- \`${f}\``).join('\n')}

              If tests aren't needed, you can ignore this message.
              `;

              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const botComment = comments.find(comment =>
                comment.user.type === 'Bot' &&
                comment.body.includes('‚ö†Ô∏è No Test Changes Detected')
              );

              if (!botComment) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            }

  approve:
    name: Auto-approve if tests pass
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.pull_request.user.login == 'dependabot[bot]'

    steps:
      - name: Auto-approve Dependabot PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '‚úÖ Tests passed! Auto-approved by GitHub Actions.'
            });
